import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";

import NavBar from "../components/navbar";
import Jumbotron from "../components/jumbotron";
import { getAbsoluteTop } from "../utils/spatial";
import Card from "../components/card";
import StaticImageCard from "../components/staticImageCard";
import AnimatedImageCard from "../components/animatedImageCard";
import { useRef } from "react";

const Home: NextPage = () => {
  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });

  const quickstartSection = useRef(null);
  const acceptedFormatsSection = useRef(null);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <NavBar />
      </header>
      <main className="flex min-h-screen flex-col bg-neutral-900">
        <Jumbotron onButtonClick={() => window.scrollTo({
          top: getAbsoluteTop(quickstartSection.current),
          behavior: "smooth"
        })} />
        <section className="p-12 text-center relative overflow-hidden bg-no-repeat bg-cover rounded-lg grid lg:grid-cols-3 md:grid-cols-1 gap-4">
          <div className="lg:col-span-3 md:col-span-1">
            <h2 ref={quickstartSection} className="text-xl text-white mb-4">Quickstart</h2>
            <hr className="w-40 mx-auto border-t-2 border-gray-400 mt-6 mb-6" />
          </div>
          <div className="col-span-1">
            <StaticImageCard
              title="Sign in/up"
              text="We support sign-in with GitHub, GitLab or Bitbucket"
              imageSrc="/images/source-control.svg"
              imageAlt="GitHub, GitLab and Bitbucket logos"
              buttonText="Get started"
              buttonOnClick={() => signIn()}
            />
          </div>
          <div className="col-span-1">
            <AnimatedImageCard
              title="Train your first microclassifier"
              text="Provide your training data as a CSV file mapping documents to classes"
              baseUrl="/images/animations/classifier-training/frame-#.svg"
              imageAlt="Animation of a Classr logo slowly filling up with colour from bottom to top"
              frameCount={10}
              frameDelay={500}
              buttonText="See supported formats"
              buttonOnClick={() => window.scrollTo({
                top: getAbsoluteTop(acceptedFormatsSection.current),
                behavior: "smooth"
              })} />
          </div>
          <div className="col-span-1">
            <AnimatedImageCard
              title="Use your trained model"
              text="Query your model using our simple HTTP REST API"
              baseUrl="/images/animations/classifier-use/frame-#.svg"
              imageAlt="Animation of a Classr logo flashing green and red from left to right"
              frameCount={2}
              frameDelay={500}
              buttonText="Read the docs" />
          </div>
        </section>
        <section className="p-12 text-center relative overflow-hidden bg-no-repeat bg-cover bg-neutral-800 rounded-lg grid lg:grid-cols-2 md:grid-cols-1 gap-4">
          <div className="lg:col-span-2 md:col-span-1">
            <h2 ref={acceptedFormatsSection} className="text-xl text-white mb-4">Accepted Formats</h2>
            <hr className="w-40 mx-auto border-t-2 border-gray-400 mt-6 mb-6" />
          </div>
          <div className="col-span-1">

          </div>
          <div className="col-span-1">

          </div>
        </section>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
